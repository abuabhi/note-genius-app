
import { useState, useEffect } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent } from "@/components/ui/card";
import { Loader2, RotateCcw, Wand2 } from "lucide-react";
import { Badge } from "@/components/ui/badge";
import { useImageProcessing } from "./hooks/useImageProcessing";
import { OCRControls } from "./ocr/OCRControls";
import { ImagePreview } from "./ocr/ImagePreview";
import { TextOutput } from "./ocr/TextOutput";
import { ProcessingIndicator } from "./ocr/ProcessingIndicator";
import { ErrorDisplay } from "./ocr/ErrorDisplay";
import { analyzeContentForTitleAndSubject } from "@/utils/contentAnalysisUtils";

interface ImageProcessorProps {
  imageUrl: string;
  onReset: () => void;
  onTextExtracted: (text: string) => void;
  selectedLanguage: string;
  onLanguageChange: (language: string) => void;
  isPremiumUser?: boolean;
  onTitleGenerated?: (title: string) => void;
  onSubjectGenerated?: (subject: string) => void;
}

export const ImageProcessor = ({
  imageUrl,
  onReset,
  onTextExtracted,
  selectedLanguage,
  onLanguageChange,
  isPremiumUser = false,
  onTitleGenerated,
  onSubjectGenerated
}: ImageProcessorProps) => {
  const [useOpenAI, setUseOpenAI] = useState(isPremiumUser);
  const [enhanceImage, setEnhanceImage] = useState(false);
  const [autoGenerated, setAutoGenerated] = useState(false);

  const {
    recognizedText,
    setRecognizedText,
    isProcessing,
    error,
    confidence,
    processedAt,
    processImage,
    resetProcessing
  } = useImageProcessing();

  // Auto-generate title and subject when text is extracted
  useEffect(() => {
    if (recognizedText && !autoGenerated) {
      const analysis = analyzeContentForTitleAndSubject(recognizedText);
      
      if (onTitleGenerated && analysis.suggestedTitle !== "Scanned Note") {
        onTitleGenerated(analysis.suggestedTitle);
      }
      
      if (onSubjectGenerated && analysis.suggestedSubject !== "Uncategorized") {
        onSubjectGenerated(analysis.suggestedSubject);
      }
      
      setAutoGenerated(true);
      console.log('Auto-generated metadata:', analysis);
    }
  }, [recognizedText, autoGenerated, onTitleGenerated, onSubjectGenerated]);

  // Forward text changes to parent
  useEffect(() => {
    onTextExtracted(recognizedText);
  }, [recognizedText, onTextExtracted]);

  const handleProcessImage = async () => {
    setAutoGenerated(false); // Reset auto-generation flag
    await processImage(imageUrl, selectedLanguage, useOpenAI, enhanceImage);
  };

  const handleTextChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {
    setRecognizedText(e.target.value);
  };

  const handleReset = () => {
    resetProcessing();
    setAutoGenerated(false);
    onReset();
  };

  return (
    <Card className="w-full">
      <CardContent className="p-4 space-y-4">
        {/* Image Preview */}
        <ImagePreview imageUrl={imageUrl} />

        {/* OCR Controls */}
        <OCRControls
          selectedLanguage={selectedLanguage}
          onLanguageChange={onLanguageChange}
          useOpenAI={useOpenAI}
          setUseOpenAI={setUseOpenAI}
          enhanceImage={enhanceImage}
          setEnhanceImage={setEnhanceImage}
          isPremiumUser={isPremiumUser}
          isProcessing={isProcessing}
          onProcess={handleProcessImage}
        />

        {/* Processing Indicator */}
        {isProcessing && <ProcessingIndicator useOpenAI={useOpenAI} />}

        {/* Error Display */}
        {error && <ErrorDisplay error={error} />}

        {/* Text Output */}
        {recognizedText && (
          <div className="space-y-2">
            {autoGenerated && (
              <div className="flex items-center gap-2">
                <Badge variant="secondary" className="text-xs">
                  <Wand2 className="h-3 w-3 mr-1" />
                  Auto-generated title & subject
                </Badge>
              </div>
            )}
            <TextOutput
              recognizedText={recognizedText}
              handleTextChange={handleTextChange}
              confidence={confidence}
              processedAt={processedAt}
              useOpenAI={useOpenAI}
              isPremiumUser={isPremiumUser}
            />
          </div>
        )}

        {/* Reset Button */}
        <div className="flex justify-between items-center pt-2">
          <Button
            variant="outline"
            size="sm"
            onClick={handleReset}
            className="flex items-center gap-2"
          >
            <RotateCcw className="h-4 w-4" />
            Reset
          </Button>
          
          {recognizedText && (
            <p className="text-xs text-muted-foreground">
              {recognizedText.length} characters extracted
            </p>
          )}
        </div>
      </CardContent>
    </Card>
  );
};
